git commands for personal use

please install git on your linux -> in debian base linux type 'sudo apt install git'

and please install ohmyzsh extension

if you don't have idea for ohmyzsh follow this step ->

1 -> sudo apt install zsh -> install ohmyzsh

2 -> sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" -> this script for Configuration your ohmyzsh from original source

3 -> chsh -s $(which zsh) -> for change your default shell to ohmyzsh 

4 -> rebot your system and enjoy


you must be config your user name and email when you first time use git 

git config --global user.name
git config --global user.email



git init -> start git in folder

git status -> show your git status

git add -> add file to git track

git add "*.html" -> add any html file

git add "page*" -> add any file friest word is page

git add -A -> add any file in directory

git commit -m -> enter commit to your change -> git commit -m 'any_text'

git commit -> enter your commit in your editor

git log -> show your log or the same your git history

git diff HEAD -> tell you changes

git diff --staged ->stage file changes

git reset -> take out file from stage -> git reset file_name

git checkout -- -> back file to latest commit -> git checkout -- file_name 

git branch -> show you your branch

git branch your_branch_name -> create branch

git checkout -> move between branch -> git checkout branch_name

git merge -> merge branch -> git merge branch_name

! if you to branch example master and fix you must merge on master example git merge fix

git rm -> delete file in git and your system -> git rm file_name

git branch -d -> delete branch -> git branch -d branch_name

git clone -> clone repository in github or gitlab -> git clone repository_name

git push -> push your change to repository -> git push origin master

! origin or master just name

! git push origin main


git remote set-url origin https://github.com/mrafk-manam/git-recovery

git remote set-url origin https://<yourToken>@github.com/mrafk-manam/git-recovery

git pull -> get update github changes -> git pull origin master

! origin or master just name

! git push origin main

git pull -> i don't know wich is correct

note -> why use remote?! we use remote because

1 -> work with multi platform example git hub and gitlab in this case we use new remote for example gitlab for enable changes for two services

2 -> remote is very usefull but i don't know other uses 

git remote -> show remotes

git remote -v -> show remotes with many detaile

git remote add -> remote to server -> git add remote_name server_name

!git remote add origin  https://github.com

!git remote can composition with add or remove or rename

git push -u origin master -> your branch connect to remote branch

git push -u origin master -> if you use for one time you dont need type every carachter you can type -> git push

!!!!!so far you know basic in git this file is very summery and the future i promise adding explation to this file and make professional part thanks for reading 

ok for back to before commit we need to commit_hash and we have 3 method to back before commit -> 

1 -> we can use git checkout commit_hash but this method create new branch and this is not really helpfull but can use for watch changes before commit for example -> git checkout commit_hash 

2 -> we can use reset with 3 switch i tell you switch -> 

ond -> git reset --soft -> just switch pointer and hold changes to staging level

two -> git reset --mixed -> mixed is defualt mixed mixed switch pointer and exit changes form staging -> example -> git reset == git reset --mixed 

three -> git reset -- hard -> this is what we want this command helps to back before commit but its back commit and be cureful its back time to calling commit its ok for personal project but if you work with other people maybe get into problem -> git reset --hard commit_hash

3 -> git revert -> revert can calling before commit and make new commit -> git revert commit_hash

ok maybe you want back one file changes you can use two method ->

1-> i tell you higher you can use git checkout but checkout can back you to 1 before commit but if you want to back file to any commit you should use secondery method

2 -> this method some hard but its working -> git restore --soure=[commit_hash] [file_location] -> git restore --source=commit_hash index.html 

!!!maybe you can't find commit hash in this position you should type command and instead of commit_hash press enter
i was wrong you can find commit_hash with git log



ok know we start git professional








git show -> show commit changes -> git show commit_hash

git tag -> show your project tags -> if you don't write a tag this command show nothing

git tag -a -> help you to adding tag to your project -> git tag -a tag_name -> this method open your editor to adding message to your tag

git tag -a tag_name -m "any_message" -> adding tag and adding message to ->git tag -a tag_name  -m 'any_text -> example -> git tag -a v2.0 -m 'create version 2 '

you can create tag affter commit -> example -> git tag -a commit_hash -> git tag -a tag_name -m "any_text " commit_hash

git tag -l -> you can search commit -> git tag -l "any_text" -> git tag -l "v*"

git show tag_name -> its show that commit compantion your tag -> git show v2.0

git in normal mode don't push your tags to github or gitlab or .... for push tags ->

git push origin v2.0

or 

git push origin --tags

git checkout tag_name -> in this command you back in tag but its not branch its just Birch 

git tag -d tag_name -> delete tag -> example -> git tag -d v2.0

if you want to delete tag from github ->

git push origin --delete tag_name -> example git push origin --delete v2.0 

if your git older than 1.8.0 you must use -d instead of --delete





ok in next lesson i want to talk about commit hash -> enter git log and view commit_hash
commit_hash don't peremission to change commit but hash not signature and its can be faked 

for this problem we can signature commit when its can be fake that author hack

we can signature with encryption with gpg (if you want know about gpg search about pgp)

ok for work with gpg companion with me -> 

gpg --list-keys -> show your keys

gpg --gen-key -> generate key -> when you create a key with this command its wants you your name (it should not be less than 5 characters) and your email and its ask you to this username and email is write ? and after this stage its want password 

and doneeeeee you have your key

git config --global user.signingkey -> show your signinkey (its vacant because you not config)

 gpg --list-secret-keys --keyid-format LONG -> its show your secret key

ok i can't show my key but its like this -> sec fjkadnfk/nvdkjabfjbakfdjad.sjf

we work with after / -> nvdkjabfjbakfdjad.sjf -> in this example this is your secret key

after this work we must use this with ->

git config --global user.signingkey your_secret_key 

for signature your tag ->

git tag -s tag_name -m 'any_text' -> we substitute -a with -s

when its show you that use git show tag_name

git tag -v -> its verify tag -> git tag -v tag_name -> git tag -v v2.0

if you want to signature your commit -> git commit -S -m 'any_text'

!!!!!in tag we use little s and in commit we use big S 

git help -> help you about command -> git help command_name

git blame -> who write this line or file 

git blame file_name -> example -> git blame text.txt

git blame file_name -L -> help you untill check it out line -> gti blame file_name -lLine_name -> example -> git blame file_name -l2 -> this exmaple check out line 2 writer

example -> git blame file_name -l8,10 -> in this example we watch changes between line 8 and 10

git bisect -> binery search commit 

git bisect start -> start using bisect 

git bisect bad -> we in bad position 

git bisect good commit_hash -> we tell bisect that problem did not exist in The commit hash we chose 

when you run bisect and tell him bad posotion and good position bisect give you a hash and ask you Is there still a problem? and you answer with git bisect good or git bisect bad

when you complete steps bisect give you a hash That there was no problem with it. 

and doneeeeeee



we can keep our code in local -> its use when you want to keep code in your company -> if you want this search for it

fork -> fork repository It means that you fork project in your github 

you can merge request to every one to accept your change 

its my git lessen but in the futrue i added file from jadi in this project

